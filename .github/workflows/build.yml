name: build & release

on:
  push:
    branches:
      - main
      - feature/*
    tags:
      - v*
  pull_request:
    types:
      - opened
      - reopened
    branches:
      - main

env:
  RUST_VERSION: "1.86.0"

jobs:
  build:
    name: build - ${{ matrix.settings.target }} (${{ matrix.settings.host }})
    runs-on: ${{ matrix.settings.host }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64-gnu
          - host: macos-13
            target: x86_64-apple-darwin
            platform: darwin-x64
          - host: macos-latest
            target: aarch64-apple-darwin
            platform: darwin-arm64
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            platform: win32-x64-msvc

    steps:
      - uses: actions/checkout@v4
      
      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: commit-wizard-napi/package-lock.json

      - name: install rust
        uses: dtolnay/rust-toolchain@${{ env.RUST_VERSION }}
        with:
          targets: ${{ matrix.settings.target }}
          components: clippy
      
      - name: cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ env.RUST_VERSION }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ env.RUST_VERSION }}-

      - name: install and run cargo-audit
        run: |
          cargo install cargo-audit --force
          cargo audit

      - name: run clippy
        run: cargo clippy -- -D warnings

      - name: run cargo tests
        run: cargo test

      - name: install and run cargo-tarpaulin for coverage
        if: matrix.settings.host == 'ubuntu-latest'
        run: |
          cargo install cargo-tarpaulin --force
          cargo tarpaulin --all-features --workspace --exclude commit-wizard-napi --out Html

      - name: upload coverage report
        if: always() && matrix.settings.host == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: tarpaulin-report.html

      - name: cache homebrew on macos
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: |
            /opt/homebrew/Cellar/openssl@3
            /usr/local/Cellar/openssl@3
          key: ${{ runner.os }}-${{ matrix.settings.host }}-homebrew-openssl-3.5.1
          restore-keys: |
            ${{ runner.os }}-${{ matrix.settings.host }}-homebrew-openssl-

      - name: install and configure openssl on macos
        if: runner.os == 'macOS'
        run: |
          # Install if not already present
          if ! brew list openssl@3 &>/dev/null; then
            brew install openssl@3
          fi
          
          OPENSSL_PATH=$(brew --prefix openssl@3)
          echo "OPENSSL_DIR=$OPENSSL_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$OPENSSL_PATH/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$OPENSSL_PATH/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$OPENSSL_PATH/include" >> $GITHUB_ENV
          
          TARGET_UPPER_SNAKE=$(echo ${{ matrix.settings.target }} | tr 'a-z-' 'A-Z_')
          echo "${TARGET_UPPER_SNAKE}_OPENSSL_DIR=$OPENSSL_PATH" >> $GITHUB_ENV
          echo "${TARGET_UPPER_SNAKE}_OPENSSL_LIB_DIR=$OPENSSL_PATH/lib" >> $GITHUB_ENV
          echo "${TARGET_UPPER_SNAKE}_OPENSSL_INCLUDE_DIR=$OPENSSL_PATH/include" >> $GITHUB_ENV
      
      - name: build napi module
        shell: bash
        run: |
          cd commit-wizard-napi
          npm install
          npm test
          npm run build
          ls -la
          find . -name "*.node" -type f
      
      - name: build rust cli binary
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.settings.target }} --bin commit-wizard
          
          # prepare binary with appropriate extension
          if [[ "${{ matrix.settings.target }}" == *"windows"* ]]; then
            cp target/${{ matrix.settings.target }}/release/commit-wizard.exe commit-wizard-${{ matrix.settings.target }}.exe
          else
            cp target/${{ matrix.settings.target }}/release/commit-wizard commit-wizard-${{ matrix.settings.target }}
          fi
      
      - name: upload napi artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.platform }}
          path: commit-wizard-napi/*.node
          if-no-files-found: error
      
      - name: upload rust binary artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rust-binary-${{ matrix.settings.target }}
          path: commit-wizard-*
          if-no-files-found: error
  
  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'
          cache: npm
          cache-dependency-path: commit-wizard-napi/package-lock.json
      
      - name: download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: setup napi artifacts for npm
        run: |
          cp artifacts/bindings-linux-x64-gnu/*.node commit-wizard-napi/
          cp artifacts/bindings-darwin-x64/*.node commit-wizard-napi/
          cp artifacts/bindings-darwin-arm64/*.node commit-wizard-napi/
          cp artifacts/bindings-win32-x64-msvc/*.node commit-wizard-napi/
      
      - name: publish to npm
        run: |
          cd commit-wizard-napi
          npm install
          npm run prepare_for_prepublish
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: prepare rust binaries for github release
        run: |
          mkdir -p release-binaries
          
          # create archives for each platform
          cp artifacts/rust-binary-x86_64-unknown-linux-gnu/commit-wizard-x86_64-unknown-linux-gnu release-binaries/
          tar -czf release-binaries/commit-wizard-linux-x64.tar.gz -C release-binaries commit-wizard-x86_64-unknown-linux-gnu
          
          cp artifacts/rust-binary-x86_64-apple-darwin/commit-wizard-x86_64-apple-darwin release-binaries/
          tar -czf release-binaries/commit-wizard-macos-x64.tar.gz -C release-binaries commit-wizard-x86_64-apple-darwin
          
          cp artifacts/rust-binary-aarch64-apple-darwin/commit-wizard-aarch64-apple-darwin release-binaries/
          tar -czf release-binaries/commit-wizard-macos-arm64.tar.gz -C release-binaries commit-wizard-aarch64-apple-darwin
          
          cp artifacts/rust-binary-x86_64-pc-windows-msvc/commit-wizard-x86_64-pc-windows-msvc.exe release-binaries/
          tar -czf release-binaries/commit-wizard-windows-x64.tar.gz -C release-binaries commit-wizard-x86_64-pc-windows-msvc.exe
      
      - name: create github release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: commit-wizard ${{ github.ref_name }}
          body: |
            ## commit-wizard ${{ github.ref_name }}
            
            install via npm: `npm install -g @jamiehdev/commit-wizard`
            
            ### standalone binaries
            download and run directly without node.js:
            - linux x64: commit-wizard-linux-x64.tar.gz
            - macos x64: commit-wizard-macos-x64.tar.gz
            - macos arm64: commit-wizard-macos-arm64.tar.gz
            - windows x64: commit-wizard-windows-x64.tar.gz
            
            ### napi modules (for development)
            - linux x64: commit-wizard.linux-x64-gnu.node
            - macos x64: commit-wizard.darwin-x64.node 
            - macos arm64: commit-wizard.darwin-arm64.node
            - windows x64: commit-wizard.win32-x64-msvc.node
          files: |
            release-binaries/commit-wizard-linux-x64.tar.gz
            release-binaries/commit-wizard-macos-x64.tar.gz
            release-binaries/commit-wizard-macos-arm64.tar.gz
            release-binaries/commit-wizard-windows-x64.tar.gz
            artifacts/bindings-linux-x64-gnu/commit-wizard.linux-x64-gnu.node
            artifacts/bindings-darwin-x64/commit-wizard.darwin-x64.node
            artifacts/bindings-darwin-arm64/commit-wizard.darwin-arm64.node
            artifacts/bindings-win32-x64-msvc/commit-wizard.win32-x64-msvc.node
          draft: false
          prerelease: false
