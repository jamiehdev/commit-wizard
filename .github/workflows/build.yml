name: build & release

on:
  push:
    branches:
      - main
      - feature/*
    tags:
      - v*
  pull_request:
    types:
      - opened
      - reopened
    branches:
      - main

jobs:
  build:
    name: build - ${{ matrix.settings.target }} (${{ matrix.settings.host }})
    runs-on: ${{ matrix.settings.host }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64-gnu
          - host: macos-latest
            target: x86_64-apple-darwin
            platform: darwin-x64
          - host: macos-latest
            target: aarch64-apple-darwin
            platform: darwin-arm64
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            platform: win32-x64-msvc

    steps:
      - uses: actions/checkout@v4
      
      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - name: install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}
      
      - name: build napi module
        shell: bash
        run: |
          cd commit-wizard-napi
          npm install
          npm run build
          ls -la
          find . -name "*.node" -type f
      
      - name: build rust cli binary
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.settings.target }} --bin commit-wizard
          
          # prepare binary with appropriate extension
          if [[ "${{ matrix.settings.target }}" == *"windows"* ]]; then
            cp target/${{ matrix.settings.target }}/release/commit-wizard.exe commit-wizard-${{ matrix.settings.target }}.exe
          else
            cp target/${{ matrix.settings.target }}/release/commit-wizard commit-wizard-${{ matrix.settings.target }}
          fi
      
      - name: upload napi artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.platform }}
          path: commit-wizard-napi/*.node
          if-no-files-found: error
      
      - name: upload rust binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-binary-${{ matrix.settings.target }}
          path: commit-wizard-*
          if-no-files-found: error
  
  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org/'
      
      - name: download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: move napi artifacts
        run: |
          mkdir -p commit-wizard-napi/npm/linux-x64-gnu
          mkdir -p commit-wizard-napi/npm/darwin-x64
          mkdir -p commit-wizard-napi/npm/darwin-arm64
          mkdir -p commit-wizard-napi/npm/win32-x64-msvc
          
          cp artifacts/bindings-linux-x64-gnu/*.node commit-wizard-napi/
          cp artifacts/bindings-darwin-x64/*.node commit-wizard-napi/
          cp artifacts/bindings-darwin-arm64/*.node commit-wizard-napi/
          cp artifacts/bindings-win32-x64-msvc/*.node commit-wizard-napi/
      
      - name: prepare rust binaries for release
        run: |
          mkdir -p release-binaries
          
          # copy and create archives for each platform
          cp artifacts/rust-binary-x86_64-unknown-linux-gnu/commit-wizard-x86_64-unknown-linux-gnu release-binaries/
          tar -czf release-binaries/commit-wizard-linux-x64.tar.gz -C release-binaries commit-wizard-x86_64-unknown-linux-gnu
          
          cp artifacts/rust-binary-x86_64-apple-darwin/commit-wizard-x86_64-apple-darwin release-binaries/
          tar -czf release-binaries/commit-wizard-macos-x64.tar.gz -C release-binaries commit-wizard-x86_64-apple-darwin
          
          cp artifacts/rust-binary-aarch64-apple-darwin/commit-wizard-aarch64-apple-darwin release-binaries/
          tar -czf release-binaries/commit-wizard-macos-arm64.tar.gz -C release-binaries commit-wizard-aarch64-apple-darwin
          
          cp artifacts/rust-binary-x86_64-pc-windows-msvc/commit-wizard-x86_64-pc-windows-msvc.exe release-binaries/
          cd release-binaries && zip commit-wizard-windows-x64.zip commit-wizard-x86_64-pc-windows-msvc.exe && cd ..
      
      - name: install dependencies
        run: |
          cd commit-wizard-napi
          npm install
      
      - name: publish to npm
        run: |
          cd commit-wizard-napi
          npm run prepare_for_prepublish
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: create github release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: commit-wizard ${{ github.ref_name }}
          body: |
            ## commit-wizard ${{ github.ref_name }}
            
<<<<<<< HEAD
            install via npm: `npm i -g @jamiehdev/commit-wizard`
            
            ### standalone binaries
            download and run directly without node.js:
            - linux x64: `commit-wizard-linux-x64.tar.gz`
            - macos x64: `commit-wizard-macos-x64.tar.gz`
            - macos arm64: `commit-wizard-macos-arm64.tar.gz`
            - windows x64: `commit-wizard-windows-x64.zip`
            
            ### napi modules (for development)
            - linux x64: `commit-wizard.linux-x64-gnu.node`
            - macos x64: `commit-wizard.darwin-x64.node` 
            - macos arm64: `commit-wizard.darwin-arm64.node`
            - windows x64: `commit-wizard.win32-x64-msvc.node`
          draft: false
          prerelease: false
      
      - name: upload linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/bindings-linux-x64-gnu/commit-wizard.linux-x64-gnu.node
          asset_name: commit-wizard.linux-x64-gnu.node
          asset_content_type: application/octet-stream
      
      - name: upload macos x64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/bindings-darwin-x64/commit-wizard.darwin-x64.node
          asset_name: commit-wizard.darwin-x64.node
          asset_content_type: application/octet-stream
      
      - name: upload macos arm64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/bindings-darwin-arm64/commit-wizard.darwin-arm64.node
          asset_name: commit-wizard.darwin-arm64.node
          asset_content_type: application/octet-stream
      
      - name: upload windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/bindings-win32-x64-msvc/commit-wizard.win32-x64-msvc.node
          asset_name: commit-wizard.win32-x64-msvc.node
          asset_content_type: application/octet-stream
      
      # upload standalone rust binaries
      - name: upload linux rust binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-binaries/commit-wizard-linux-x64.tar.gz
          asset_name: commit-wizard-linux-x64.tar.gz
          asset_content_type: application/gzip
      
      - name: upload macos x64 rust binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-binaries/commit-wizard-macos-x64.tar.gz
          asset_name: commit-wizard-macos-x64.tar.gz
          asset_content_type: application/gzip
      
      - name: upload macos arm64 rust binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-binaries/commit-wizard-macos-arm64.tar.gz
          asset_name: commit-wizard-macos-arm64.tar.gz
          asset_content_type: application/gzip
      
      - name: upload windows rust binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-binaries/commit-wizard-windows-x64.zip
          asset_name: commit-wizard-windows-x64.zip
          asset_content_type: application/zip
