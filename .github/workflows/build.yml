name: build & release

on:
  push:
    branches:
      - main
      - feature/*
    tags:
      - v*
  pull_request:
    types:
      - opened
      - reopened
    branches:
      - main

jobs:
  build:
    name: build - ${{ matrix.settings.target }} (${{ matrix.settings.host }})
    runs-on: ${{ matrix.settings.host }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64-gnu
          - host: macos-13
            target: x86_64-apple-darwin
            platform: darwin-x64
          - host: macos-latest
            target: aarch64-apple-darwin
            platform: darwin-arm64
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            platform: win32-x64-msvc

    steps:
      - uses: actions/checkout@v4
      
      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: commit-wizard-napi/package-lock.json

      - name: install rust
        id: rust-toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}
          components: clippy
      
      - name: cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.settings.target }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: install and run cargo-audit
        run: |
          cargo install cargo-audit --force
          cargo audit --deny critical,high

      - name: run clippy
        run: cargo clippy -- -D warnings

      - name: run cargo tests
        run: cargo test

      - name: install and run cargo-tarpaulin for coverage
        if: matrix.settings.host == 'ubuntu-latest'
        run: |
          cargo install cargo-tarpaulin --force
          cargo tarpaulin --all-features --workspace --exclude commit-wizard-napi --out Html --out Json

      - name: upload coverage report
        if: matrix.settings.host == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            tarpaulin-report.html
            tarpaulin-report.json

      - name: add coverage summary
        if: matrix.settings.host == 'ubuntu-latest'
        run: |
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          
          # extract coverage percentage from json
          if [ -f tarpaulin-report.json ]; then
            COVERAGE=$(cat tarpaulin-report.json | grep -o '"coverage":[0-9.]*' | cut -d':' -f2)
            if [ ! -z "$COVERAGE" ]; then
              COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc -l | cut -d'.' -f1)
              echo "Overall coverage: **${COVERAGE_PERCENT}%**" >> $GITHUB_STEP_SUMMARY
              
              # add coverage badge colour
              if [ "$COVERAGE_PERCENT" -ge 80 ]; then
                echo "üü¢ Good coverage" >> $GITHUB_STEP_SUMMARY
              elif [ "$COVERAGE_PERCENT" -ge 60 ]; then
                echo "üü° Moderate coverage" >> $GITHUB_STEP_SUMMARY
              else
                echo "üî¥ Low coverage" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Full HTML report available in artifacts." >> $GITHUB_STEP_SUMMARY

      - name: install openssl on macos
        if: runner.os == 'macOS'
        run: |
          # note: consider using vendored openssl feature to avoid brew installation
          # add openssl = { version = "0.10", features = ["vendored"] } to Cargo.toml
          brew install openssl@3
          OPENSSL_PATH=$(brew --prefix openssl@3)
          echo "OPENSSL_DIR=$OPENSSL_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$OPENSSL_PATH/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$OPENSSL_PATH/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$OPENSSL_PATH/include" >> $GITHUB_ENV
          
          TARGET_UPPER_SNAKE=$(echo ${{ matrix.settings.target }} | tr 'a-z-' 'A-Z_')
          echo "${TARGET_UPPER_SNAKE}_OPENSSL_DIR=$OPENSSL_PATH" >> $GITHUB_ENV
          echo "${TARGET_UPPER_SNAKE}_OPENSSL_LIB_DIR=$OPENSSL_PATH/lib" >> $GITHUB_ENV
          echo "${TARGET_UPPER_SNAKE}_OPENSSL_INCLUDE_DIR=$OPENSSL_PATH/include" >> $GITHUB_ENV
      
      - name: build napi module
        shell: bash
        run: |
          cd commit-wizard-napi
          npm install
          npm test
          npm run build
          ls -la
          find . -name "*.node" -type f
      
      - name: build rust cli binary
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.settings.target }} --bin commit-wizard
          
          # prepare binary with appropriate extension
          if [[ "${{ matrix.settings.target }}" == *"windows"* ]]; then
            cp target/${{ matrix.settings.target }}/release/commit-wizard.exe commit-wizard-${{ matrix.settings.target }}.exe
          else
            cp target/${{ matrix.settings.target }}/release/commit-wizard commit-wizard-${{ matrix.settings.target }}
          fi
      
      - name: upload napi artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.platform }}
          path: commit-wizard-napi/*.node
          if-no-files-found: error
      
      - name: upload rust binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-binary-${{ matrix.settings.target }}
          path: commit-wizard-*
          if-no-files-found: error
  
  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'
          cache: npm
          cache-dependency-path: commit-wizard-napi/package-lock.json
      
      - name: download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: setup napi artifacts for npm
        run: |
          cp artifacts/bindings-linux-x64-gnu/*.node commit-wizard-napi/
          cp artifacts/bindings-darwin-x64/*.node commit-wizard-napi/
          cp artifacts/bindings-darwin-arm64/*.node commit-wizard-napi/
          cp artifacts/bindings-win32-x64-msvc/*.node commit-wizard-napi/
      
      - name: publish to npm
        run: |
          cd commit-wizard-napi
          npm install
          npm run prepare_for_prepublish
          
          # only publish from tags, not from forks or pull requests
          if [[ "${{ github.repository }}" == "jamiehdev/commit-wizard" && "${{ github.ref_type }}" == "tag" ]]; then
            npm publish --access public
            echo "‚úÖ published to npm"
          else
            echo "‚ö†Ô∏è skipping npm publish (not a tag on main repository)"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: prepare rust binaries for github release
        run: |
          mkdir -p release-binaries
          
          # create archives for each platform
          cp artifacts/rust-binary-x86_64-unknown-linux-gnu/commit-wizard-x86_64-unknown-linux-gnu release-binaries/
          tar -czf release-binaries/commit-wizard-linux-x64.tar.gz -C release-binaries commit-wizard-x86_64-unknown-linux-gnu
          
          cp artifacts/rust-binary-x86_64-apple-darwin/commit-wizard-x86_64-apple-darwin release-binaries/
          tar -czf release-binaries/commit-wizard-macos-x64.tar.gz -C release-binaries commit-wizard-x86_64-apple-darwin
          
          cp artifacts/rust-binary-aarch64-apple-darwin/commit-wizard-aarch64-apple-darwin release-binaries/
          tar -czf release-binaries/commit-wizard-macos-arm64.tar.gz -C release-binaries commit-wizard-aarch64-apple-darwin
          
          cp artifacts/rust-binary-x86_64-pc-windows-msvc/commit-wizard-x86_64-pc-windows-msvc.exe release-binaries/
          tar -czf release-binaries/commit-wizard-windows-x64.tar.gz -C release-binaries commit-wizard-x86_64-pc-windows-msvc.exe
      
      - name: create github release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: commit-wizard ${{ github.ref_name }}
          body: |
            ## commit-wizard ${{ github.ref_name }}
            
            install via npm: `npm install -g @jamiehdev/commit-wizard`
            
            ### standalone binaries
            download and run directly without node.js:
            - linux x64: commit-wizard-linux-x64.tar.gz
            - macos x64: commit-wizard-macos-x64.tar.gz
            - macos arm64: commit-wizard-macos-arm64.tar.gz
            - windows x64: commit-wizard-windows-x64.tar.gz
            
            ### napi modules (for development)
            - linux x64: commit-wizard.linux-x64-gnu.node
            - macos x64: commit-wizard.darwin-x64.node 
            - macos arm64: commit-wizard.darwin-arm64.node
            - windows x64: commit-wizard.win32-x64-msvc.node
          files: |
            release-binaries/commit-wizard-linux-x64.tar.gz
            release-binaries/commit-wizard-macos-x64.tar.gz
            release-binaries/commit-wizard-macos-arm64.tar.gz
            release-binaries/commit-wizard-windows-x64.tar.gz
            artifacts/bindings-linux-x64-gnu/commit-wizard.linux-x64-gnu.node
            artifacts/bindings-darwin-x64/commit-wizard.darwin-x64.node
            artifacts/bindings-darwin-arm64/commit-wizard.darwin-arm64.node
            artifacts/bindings-win32-x64-msvc/commit-wizard.win32-x64-msvc.node
          draft: false
          prerelease: false
